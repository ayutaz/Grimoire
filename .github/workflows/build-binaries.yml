name: Build Binaries

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: grimoire-linux
            binary_name: grimoire
          - os: windows-latest
            artifact_name: grimoire-windows
            binary_name: grimoire.exe
          - os: macos-latest
            artifact_name: grimoire-macos
            binary_name: grimoire

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-opencv libgl1-mesa-glx

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install -e .
        pip install pyinstaller

    - name: Debug - List files
      run: |
        echo "Current directory:"
        pwd
        echo "Files in root:"
        ls -la
        echo "Python path:"
        python -c "import sys; print(sys.path)"
        echo "Installed packages:"
        pip list

    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile --name grimoire --paths src --hidden-import PIL._tkinter_finder --hidden-import pkg_resources.py2_warn --distpath dist src/grimoire/cli.py

    - name: Check build output (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "File type:"
        file dist/*

    - name: Check build output (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Contents of dist directory:"
        dir dist
        echo "Files:"
        Get-ChildItem -Path dist

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.binary_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/grimoire-linux/grimoire
          artifacts/grimoire-windows/grimoire.exe
          artifacts/grimoire-macos/grimoire
        body: |
          # Grimoire Release

          ## ダウンロード
          - **Windows**: `grimoire.exe`
          - **macOS**: `grimoire` (macOS用)
          - **Linux**: `grimoire` (Linux用)

          ## 使い方
          ```bash
          # 魔法陣をコンパイル
          ./grimoire compile magic_circle.png -o spell

          # 魔法陣を実行
          ./grimoire run magic_circle.png

          # デバッグモード
          ./grimoire debug magic_circle.png
          ```

          ## 注意事項
          - macOSでは初回実行時にセキュリティ許可が必要な場合があります
          - Linuxでは `chmod +x grimoire` で実行権限を付与してください
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}