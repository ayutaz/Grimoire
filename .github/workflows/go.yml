name: Go CI/CD

on:
  push:
    branches: [ main, feature/go-migration ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'  # 開発推奨バージョン

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.21', '1.22', '1.23']  # 最低保証から最新まで
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
    
    - name: Get Go paths (Unix)
      id: go-paths
      if: runner.os != 'Windows'
      run: |
        echo "mod-cache=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
        echo "build-cache=$(go env GOCACHE)" >> $GITHUB_OUTPUT
    
    - name: Get Go paths (Windows)
      id: go-paths-windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        echo "mod-cache=$(go env GOMODCACHE)" >> $env:GITHUB_OUTPUT
        echo "build-cache=$(go env GOCACHE)" >> $env:GITHUB_OUTPUT
    
    - name: Cache Go modules (Unix)
      if: runner.os != 'Windows'
      uses: actions/cache@v4
      continue-on-error: true
      with:
        path: |
          ${{ steps.go-paths.outputs.mod-cache }}
          ${{ steps.go-paths.outputs.build-cache }}
        key: ${{ runner.os }}-${{ runner.arch }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-go-${{ matrix.go }}-
    
    - name: Cache Go modules (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      continue-on-error: true
      with:
        path: |
          ${{ steps.go-paths-windows.outputs.mod-cache }}
          ${{ steps.go-paths-windows.outputs.build-cache }}
        key: ${{ runner.os }}-${{ runner.arch }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-${{ runner.arch }}-go-${{ matrix.go }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      run: go test -v -race "-coverprofile=coverage.out" ./...
    
    - name: Upload coverage
      if: matrix.go == '1.23'  # 最新版のみカバレッジ送信（全OS）
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.go }}
    
    - name: Run benchmarks (Unix)
      if: matrix.go == '1.23' && runner.os != 'Windows'  # 最新版のみベンチマーク（Windows以外）
      run: go test -bench=. -benchmem ./...
    
    - name: Run benchmarks (Windows)
      if: matrix.go == '1.23' && runner.os == 'Windows'  # Windows環境でのベンチマーク
      shell: cmd  # PowerShellの代わりにcmd.exeを使用
      run: go test -bench=. -benchmem ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build all platforms
      run: |
        make build-all
        ls -la dist/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: grimoire-binaries
        path: dist/*
        retention-days: 7

  integration-test:
    name: Integration Test
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: grimoire-binaries
        path: dist
    
    - name: Make binary executable
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x dist/grimoire-*
    
    - name: Test compilation (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          BINARY=./dist/grimoire-darwin-amd64
        else
          BINARY=./dist/grimoire-linux-amd64
        fi
        # Test version command first
        $BINARY --version
        # Test compilation with example files
        for example in examples/images/*.png; do
          echo "Testing compilation of $example"
          $BINARY compile "$example" || echo "Warning: Compilation failed for $example"
        done
    
    - name: Test compilation (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Test version command first
        ./dist/grimoire-windows-amd64.exe --version
        # Test compilation with example files
        Get-ChildItem examples/images/*.png | ForEach-Object {
          Write-Host "Testing compilation of $_"
          ./dist/grimoire-windows-amd64.exe compile $_.FullName
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Warning: Compilation failed for $_"
          }
        }

