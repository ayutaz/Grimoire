name: Go CI/CD

on:
  push:
    branches: [ main, feature/go-migration ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.21', '1.22']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-${{ matrix.os }}-${{ matrix.go }}
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build all platforms
      run: |
        make build-all
        ls -la dist/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: grimoire-binaries
        path: dist/*
        retention-days: 7

  integration-test:
    name: Integration Test
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: grimoire-binaries
        path: dist
    
    - name: Make binary executable
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x dist/grimoire-*
    
    - name: Test hello world (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          ./dist/grimoire-darwin-amd64 run examples/images/hello_world.png
        else
          ./dist/grimoire-linux-amd64 run examples/images/hello_world.png
        fi
    
    - name: Test hello world (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        ./dist/grimoire-windows-amd64.exe run examples/images/hello_world.png

  release:
    name: Release
    needs: [build, integration-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: grimoire-binaries
        path: dist
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*
        draft: false
        prerelease: false
        generate_release_notes: true