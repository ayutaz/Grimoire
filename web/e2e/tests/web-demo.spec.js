const { test, expect } = require('@playwright/test');
const path = require('path');
const fs = require('fs');

test.describe('Grimoire Web Demo', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/');
    // Wait for WebAssembly and Pyodide to initialize
    await page.waitForFunction(() => {
      return window.wasmInstance !== undefined && window.pyodide !== undefined;
    }, { timeout: 30000 });
  });

  test('should load the page correctly', async ({ page }) => {
    await expect(page).toHaveTitle(/Grimoire Web Demo/);
    await expect(page.locator('h1')).toContainText('Grimoire');
    await expect(page.locator('#execute-btn')).toBeVisible();
  });

  test('should display sample images', async ({ page }) => {
    const sampleImages = ['hello-world', 'calculator', 'fibonacci', 'loop'];
    
    for (const sample of sampleImages) {
      const sampleElement = page.locator(`[data-sample="${sample}"]`);
      await expect(sampleElement).toBeVisible();
    }
  });

  test('should process hello-world sample image', async ({ page }) => {
    // Click on hello-world sample
    await page.click('[data-sample="hello-world"]');
    
    // Wait for preview to show
    await expect(page.locator('#preview-image')).toBeVisible();
    
    // Click execute button
    await page.click('#execute-btn');
    
    // Wait for result
    await page.waitForSelector('.result-section', { state: 'visible', timeout: 10000 });
    
    // Check if Python code was generated
    const codeContent = await page.textContent('#code-content');
    expect(codeContent).toContain('#!/usr/bin/env python3');
    expect(codeContent).toContain('# Generated by Grimoire');
    
    // Check if output contains "Hello, World!" or similar
    // Note: The actual output depends on Pyodide execution
    const outputContent = await page.textContent('#output-content');
    expect(outputContent).toBeTruthy();
  });

  test('should process loop sample image', async ({ page }) => {
    // Click on loop sample
    await page.click('[data-sample="loop"]');
    
    // Wait for preview
    await expect(page.locator('#preview-image')).toBeVisible();
    
    // Execute
    await page.click('#execute-btn');
    
    // Wait for result
    await page.waitForSelector('.result-section', { state: 'visible', timeout: 10000 });
    
    // Check if Python code contains loop structure
    const codeContent = await page.textContent('#code-content');
    expect(codeContent).toMatch(/for\s+\w+\s+in\s+range|while\s+/);
  });

  test('should handle file upload', async ({ page }) => {
    // Create a test image file path
    const testImagePath = path.join(__dirname, '..', '..', 'static', 'samples', 'hello-world.png');
    
    // Upload file
    const fileInput = page.locator('#file-input');
    await fileInput.setInputFiles(testImagePath);
    
    // Wait for preview
    await expect(page.locator('#preview-image')).toBeVisible();
    
    // Execute
    await page.click('#execute-btn');
    
    // Wait for result
    await page.waitForSelector('.result-section', { state: 'visible', timeout: 10000 });
    
    // Verify code was generated
    const codeContent = await page.textContent('#code-content');
    expect(codeContent).toContain('#!/usr/bin/env python3');
  });

  test('should switch between tabs', async ({ page }) => {
    // Process an image first
    await page.click('[data-sample="hello-world"]');
    await page.click('#execute-btn');
    await page.waitForSelector('.result-section', { state: 'visible' });
    
    // Check all tabs
    const tabs = ['output', 'code', 'ast'];
    
    for (const tab of tabs) {
      await page.click(`[data-tab="${tab}"]`);
      await expect(page.locator(`#${tab}-tab`)).toHaveClass(/active/);
    }
  });

  test('should display debug information', async ({ page }) => {
    // Process an image
    await page.click('[data-sample="hello-world"]');
    await page.click('#execute-btn');
    await page.waitForSelector('.result-section', { state: 'visible' });
    
    // Switch to AST tab
    await page.click('[data-tab="ast"]');
    
    // Check if debug information is displayed
    const astContent = await page.textContent('#ast-content');
    expect(astContent).toContain('デバッグ情報');
    expect(astContent).toContain('検出されたシンボル数');
  });

  test('should handle errors gracefully', async ({ page }) => {
    // Try to execute without selecting an image
    await page.click('#execute-btn');
    
    // Should show error
    await expect(page.locator('.error-section')).toBeVisible();
    const errorContent = await page.textContent('#error-content');
    expect(errorContent).toContain('画像が選択されていません');
  });
});